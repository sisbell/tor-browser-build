diff --git a/tools/profiler/core/shared-libraries-linux.cc b/tools/profiler/core/shared-libraries-linux.cc
index dec00fcf1fd9..1ba087610e4f 100644
--- a/tools/profiler/core/shared-libraries-linux.cc
+++ b/tools/profiler/core/shared-libraries-linux.cc
@@ -27,17 +27,11 @@
 #include <features.h>
 #include <sys/types.h>
 
-#if defined(GP_OS_linux)
-# include <link.h>      // dl_phdr_info
-#elif defined(GP_OS_android)
 # include "ElfLoader.h" // dl_phdr_info
 extern "C" MOZ_EXPORT __attribute__((weak))
 int dl_iterate_phdr(
           int (*callback)(struct dl_phdr_info *info, size_t size, void *data),
           void *data);
-#else
-# error "Unexpected configuration"
-#endif
 
 // Get the breakpad Id for the binary file pointed by bin_name
 static std::string getId(const char *bin_name)
@@ -108,105 +102,6 @@ dl_iterate_callback(struct dl_phdr_info *dl_info, size_t size, void *data)
 SharedLibraryInfo SharedLibraryInfo::GetInfoForSelf()
 {
   SharedLibraryInfo info;
-
-#if defined(GP_OS_linux)
-  // We need to find the name of the executable (exeName, exeNameLen) and the
-  // address of its executable section (exeExeAddr) in the running image.
-  char exeName[PATH_MAX];
-  memset(exeName, 0, sizeof(exeName));
-
-  ssize_t exeNameLen = readlink("/proc/self/exe", exeName, sizeof(exeName) - 1);
-  if (exeNameLen == -1) {
-    // readlink failed for whatever reason.  Note this, but keep going.
-    exeName[0] = '\0';
-    exeNameLen = 0;
-    LOG("SharedLibraryInfo::GetInfoForSelf(): readlink failed");
-  } else {
-    // Assert no buffer overflow.
-    MOZ_RELEASE_ASSERT(exeNameLen >= 0 &&
-                       exeNameLen < static_cast<ssize_t>(sizeof(exeName)));
-  }
-
-  unsigned long exeExeAddr = 0;
-#endif
-
-#if defined(GP_OS_android)
-  // If dl_iterate_phdr doesn't exist, we give up immediately.
-  if (!dl_iterate_phdr) {
-    // On ARM Android, dl_iterate_phdr is provided by the custom linker.
-    // So if libxul was loaded by the system linker (e.g. as part of
-    // xpcshell when running tests), it won't be available and we should
-    // not call it.
-    return info;
-  }
-#endif
-
-  // Read info from /proc/self/maps. We ignore most of it.
-  pid_t pid = getpid();
-  char path[PATH_MAX];
-  SprintfLiteral(path, "/proc/%d/maps", pid);
-  std::ifstream maps(path);
-  std::string line;
-  while (std::getline(maps, line)) {
-    int ret;
-    unsigned long start;
-    unsigned long end;
-    char perm[6 + 1] = "";
-    unsigned long offset;
-    char modulePath[PATH_MAX + 1] = "";
-    ret = sscanf(line.c_str(),
-                 "%lx-%lx %6s %lx %*s %*x %" PATH_MAX_STRING(PATH_MAX) "s\n",
-                 &start, &end, perm, &offset, modulePath);
-    if (!strchr(perm, 'x')) {
-      // Ignore non executable entries
-      continue;
-    }
-    if (ret != 5 && ret != 4) {
-      LOG("SharedLibraryInfo::GetInfoForSelf(): "
-          "reading /proc/self/maps failed");
-      continue;
-    }
-
-#if defined(GP_OS_linux)
-    // Try to establish the main executable's load address.
-    if (exeNameLen > 0 && strcmp(modulePath, exeName) == 0) {
-      exeExeAddr = start;
-    }
-#elif defined(GP_OS_android)
-    // Use /proc/pid/maps to get the dalvik-jit section since it has no
-    // associated phdrs.
-    if (0 == strcmp(modulePath, "/dev/ashmem/dalvik-jit-code-cache")) {
-      info.AddSharedLibrary(SharedLibraryAtPath(modulePath, start, end,
-                                                offset));
-      if (info.GetSize() > 10000) {
-        LOG("SharedLibraryInfo::GetInfoForSelf(): "
-            "implausibly large number of mappings acquired");
-        break;
-      }
-    }
-#endif
-  }
-
-  // We collect the bulk of the library info using dl_iterate_phdr.
-  dl_iterate_phdr(dl_iterate_callback, &info);
-
-#if defined(GP_OS_linux)
-  // Make another pass over the information we just harvested from
-  // dl_iterate_phdr.  If we see a nameless object mapped at what we earlier
-  // established to be the main executable's load address, attach the
-  // executable's name to that entry.
-  for (size_t i = 0; i < info.GetSize(); i++) {
-    SharedLibrary& lib = info.GetMutableEntry(i);
-    if (lib.GetStart() == exeExeAddr && lib.GetNativeDebugPath().empty()) {
-      lib = SharedLibraryAtPath(exeName, lib.GetStart(), lib.GetEnd(),
-                                lib.GetOffset());
-
-      // We only expect to see one such entry.
-      break;
-    }
-  }
-#endif
-
   return info;
 }
 
